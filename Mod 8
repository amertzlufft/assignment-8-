package concurrency;

import java.util.Random;

	public class sum extends Thread {

public int[] arr; 

public int high, low, partial;

public sum (int[] int high, int low, arr)

{
	this.arr = arr;
	this.low = low;
	this.high = Math.min(high, arr.length);
}

public int getPartialSum()
{
	return partial;
	
}
public void run()
{
	partial = sum(high, low, arr);
}
public static sum ( int high, int low, arr)
{
	int total = 0;
	for (int i= low; i < high; i++) {
		total += arr [i];
	}
	return total;
}
public static int parallelsum(int[] arr, int threads)
{
	int size = (int) Math.ceil(arr.length * 1.0 / threads);
	sum[] sums = new sum[threads];
	for (int i = 0; i < threads; i++) {
		sums[i] = new sum(arr, i * size, (i + 1) * size);
		sums[i].start();
	}
  
  package concurrency;

import java.util.Random;

public class Main {

public static void main(String[] args)

{

Random rand = new Random();

int[] arr = new int[200000000];

for (int i = 0; i < arr.length; i++) {

arr[i] = rand.nextInt(10) + 1;

}

long start = System.currentTimeMillis();

System.out.println(sum.sum(arr));

System.out.println("Single: " + (System.currentTimeMillis() - start));

start = System.currentTimeMillis();

System.out.println(sum.parallelsum(arr));

System.out.println("Parallel: " + (System.currentTimeMillis() - start));

}

}
